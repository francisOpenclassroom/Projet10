AWSTemplateFormatVersion: "2010-09-09"

Description: >-

Parameters:

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: tp-terraform

  OnSiteSubnet:
    Type: String
    Description: IP Address of your VPN device
    Default: 192.168.100.0/24

  OnSiteAddress:
    Type: String
    Description: IP Address of your VPN device
    Default: 89.159.94.43

  PSK:
    Type: String
    Description: La clé doit être entourée de ' '
    Default: "'clesuperprivee'"

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsHostnames: True
      EnableDnsSupport: True
      Tags:
        - Key: Name
          Value: VPC

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.1.2.0/24
      MapPublicIpOnLaunch: True
      AvailabilityZone: eu-west-3c
      Tags:
        - Key: Name
          Value: PublicSubnet3 3C


  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.1.7.0/24
      MapPublicIpOnLaunch: False
      AvailabilityZone: eu-west-3c
      Tags:
        - Key: Name
          Value: PrivateSubnet3 3C

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway


  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: RT Publique

  Route:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: RT Prive

  RoutePrive:
    Type: AWS::EC2::Route
    DependsOn: NATInstance
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstance

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable

  NatEip:
    Type: AWS::EC2::EIP

  NatEipAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      EIP: !Ref NatEip
      InstanceId: !Ref NATInstance


  NATSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub NATSecurityGroup-${AWS::StackName}
      GroupDescription: Autorise le flux en provenance du reseau interne
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !GetAtt Vpc.CidrBlock
        - IpProtocol: -1
          CidrIp: 192.168.100.0/24
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !GetAtt Vpc.CidrBlock
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: '4500'
          ToPort: '4500'
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: '500'
          ToPort: '500'
          CidrIp: 0.0.0.0/0

      Tags:
        - Key: Name
          Value: !Sub NAT-SG-${AWS::StackName}

  NATInstance:
    #DependsOn: NatEip
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-00798d7180f25aac2
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      #IamInstanceProfile: !Ref InstanceProfile
      SubnetId: !Ref PublicSubnet3
      PrivateIpAddress: 10.1.2.99
      SecurityGroupIds:
        - !Ref NATSecurityGroup

      SourceDestCheck: false  # Permet d'utiliser la fonction NAT dans une instance
      UserData: #  Installation de la fonction routeur dans l'instance Linux
        Fn::Base64: !Sub |
          #!/bin/bash
          echo 1 > /proc/sys/net/ipv4/ip_forward
          echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects
          /sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE
          /sbin/iptables-save > /etc/sysconfig/iptables
          cat << NatConfFileMarker > /etc/sysctl.d/nat.conf
          net.ipv4.ip_forward = 1
          net.ipv4.conf.eth0.send_redirects = 0
          NatConfFileMarker
          service network restart
          yum -y update
          yum -y install openswan
          cat << VPNConfFileMarker > /etc/ipsec.d/projet10.conf
          conn aws-local
            type=tunnel
            authby=secret
            auto=start
            left=%defaultroute
            leftid=${NatEip}
            leftsourceip=10.1.2.99
            leftsubnet=${Vpc.CidrBlock}
            leftnexthop=%defaultroute
            right=${OnSiteAddress}
            rightsubnet=${OnSiteSubnet}
          VPNConfFileMarker
          cat << SecretFileMarker > /etc/ipsec.d/projet10.secrets
          ${NatEip} ${OnSiteAddress} : PSK ${PSK}
          SecretFileMarker
          ipsec start
          chkconfig ipsec on
      Tags:
        - Key: Name
          Value: !Sub NAT-${AWS::StackName}


  IntranetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub INTRA-SG-${AWS::StackName}

  InstanceIntranet:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-00798d7180f25aac2
      KeyName: !Ref KeyName
      SubnetId: !Ref PrivateSubnet3
      PrivateIpAddress: 10.1.7.10
      SecurityGroupIds:
        - !Ref IntranetSecurityGroup
      Tags:
        - Key: Name
          Value: INTRANET

Outputs:

  VPC:
    Description: VPC
    Value: !Ref Vpc
    Export:
      Name: !Sub ${AWS::StackName}-VPC


  PublicSubnet3:
    Description: Public Subnet AZ 3C
    Value: !Ref PublicSubnet3
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetC

  PrivateSubnet3:
    Description: Private Subnet AZ 3C
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetC



  VPCCidrBlock:
    Description: Cidr du VPC
    Value: !GetAtt Vpc.CidrBlock
    Export:
      Name: !Sub ${AWS::StackName}-VpcCidrBlock