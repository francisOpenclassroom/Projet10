AWSTemplateFormatVersion: "2010-09-09"

Description: >-

Parameters:

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: tp-terraform

  OnSiteSubnet:
    Type: String
    Description: Sous réseau sur le site local
    Default: 192.168.100.0/24

  OnSiteAddress:
    Type: String
    Description: Adresse IP Publique du site local
    Default: 89.159.94.43

  PSK:
    Type: String
    Description: La clé doit être entourée de ' '
    Default: "'clesuperprivee'"

  NetworkStackName:
    Description: >-
      Nom de la stack reseau
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
    Default: network

  VpcCidr:
    Description: SSM VPCCidrBlock
    Type: AWS::SSM::Parameter::Value<String>
    Default: VPCCidr

  NatEip:
    Description: SSM EIP
    Type: AWS::SSM::Parameter::Value<String>
    Default: EIP

Resources:

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !ImportValue
        'Fn::Sub': '${NetworkStackName}-VPC'
      Tags:
        - Key: Name
          Value: RT Prive

  RoutePrive:
    Type: AWS::EC2::Route
    DependsOn: NATInstance
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstance

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !ImportValue
        'Fn::Sub': '${NetworkStackName}-PrivateSubnetA'
      RouteTableId: !Ref PrivateRouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !ImportValue
        'Fn::Sub': '${NetworkStackName}-PrivateSubnetB'
      RouteTableId: !Ref PrivateRouteTable

  SubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !ImportValue
        'Fn::Sub': '${NetworkStackName}-PrivateSubnetC'
      RouteTableId: !Ref PrivateRouteTable


  NATSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub NATSecurityGroup-${AWS::StackName}
      GroupDescription: Autorise le flux en provenance du reseau interne
      VpcId: !ImportValue
        'Fn::Sub': '${NetworkStackName}-VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !ImportValue
            'Fn::Sub': '${NetworkStackName}-VpcCidrBlock'
        - IpProtocol: -1
          CidrIp: !Ref OnSiteSubnet
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !ImportValue
            'Fn::Sub': '${NetworkStackName}-VpcCidrBlock'
        - IpProtocol: tcp
          FromPort: '2049'
          ToPort: '2049'
          CidrIp: !ImportValue
            'Fn::Sub': '${NetworkStackName}-VpcCidrBlock'
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: '4500'
          ToPort: '4500'
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: '500'
          ToPort: '500'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub NAT-SG-${AWS::StackName}

  NatEipAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      EIP: !Ref NatEip
      InstanceId: !Ref NATInstance


  NATInstance:
    #DependsOn: NatEip
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-00798d7180f25aac2
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      #IamInstanceProfile: !Ref InstanceProfile
      SubnetId: !ImportValue
        'Fn::Sub': '${NetworkStackName}-PublicSubnetC'
      PrivateIpAddress: 10.1.2.99
      SecurityGroupIds:
        - !Ref NATSecurityGroup

      SourceDestCheck: false  # Permet d'utiliser la fonction NAT dans une instance
      UserData: #  Installation de la fonction routeur dans l'instance Linux
        Fn::Base64: !Sub |
          #!/bin/bash
          echo 1 > /proc/sys/net/ipv4/ip_forward
          echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects
          /sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE
          /sbin/iptables-save > /etc/sysconfig/iptables
          cat << NatConfFileMarker > /etc/sysctl.d/nat.conf
          net.ipv4.ip_forward = 1
          net.ipv4.conf.eth0.send_redirects = 0
          NatConfFileMarker
          service network restart
          yum -y update
          yum -y install openswan
          cat << VPNConfFileMarker > /etc/ipsec.d/projet10.conf
          conn aws-local
            type=tunnel
            authby=secret
            auto=start
            left=%defaultroute
            leftid=${NatEip}
            leftsourceip=10.1.2.99
            leftsubnet=${VpcCidr}
            leftnexthop=%defaultroute
            right=${OnSiteAddress}
            rightsubnet=${OnSiteSubnet}
            ike=aes256-sha1;modp1024
            phase2=esp
            phase2alg=aes256-sha1;modp1024
          VPNConfFileMarker
          cat << SecretFileMarker > /etc/ipsec.d/projet10.secrets
          ${NatEip} ${OnSiteAddress} : PSK ${PSK}
          SecretFileMarker
          ipsec start
          chkconfig ipsec on
      Tags:
        - Key: Name
          Value: !Sub NAT-${AWS::StackName}